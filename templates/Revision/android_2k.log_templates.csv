*** register callback for <*>
*** unregister callback for <*>
[HSM] stayAwake <*> uid: <*>, pid: <*>
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>
<*>: <*> cannot be cast to <*>
<*>: Must execute in UI
abandonAudioFocus
acquire lock=<*>, flags=<*>, tag="<*>", name=<*>, ws=<*>, uid=<*>, pid=<*>
Acquiring suspend blocker "<*>".
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>
ACTION_BATTERY_CHANGED pluggedType: <*>
ACTIVITY check resid: <*>, size=<*>
ActivityManagerService,attachApplication,callingPid = <*>
ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>
addNotification key=<*>|<*>|<*>|<*>|<*>
animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>
Animating brightness: target=<*>, rate=<*>
Application requested orientation <*>, got rotation <*> which has compatible metrics
applyOptionsLocked: Unknown animationType=<*>
ApStaDisabledState what=<*>
Bad activity token: <*>
battery changed pluggedType: <*>
cancelAutohide
cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>
cancelNotification,index:<*>
cancelNotificationLocked called,tell the app,reason = <*>
cancelNotificationLocked,remove =<*>
cancelNotificationLocked:<*>|<*>|<*>|<*>|<*>
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>
cancelPeek: <*>
ChargingSpeed  Wattage: <*> ST: <*> --> <*>
cleanUpApplicationRecord -- <*>
cleanUpApplicationRecordLocked, pid: <*>, restart: <*>
cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>
closeQs
DefaultState what=<*>
Destroying surface Surface(name=<*>) called by <*>
disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >
disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >
enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>
enqueueNotificationInternal: pkg=<*> id=<*> notification=<*>(pri=<*> contentView=<*> vibrate=[<*>] sound=<*> tick defaults=<*> flags=<*> color=<*> category=<*> vis=<*>)
enqueueNotificationInternal: pkg=<*> id=<*> notification=<*>(pri=<*> contentView=<*> vibrate=[<*>] sound=<*> tick defaults=<*> flags=<*> color=<*> vis=<*>)
flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>
getAllCellInfo is blocked by permission manager . callingPackage = <*>
getCellLocation is blocked by permission manager uid:<*> pid:<*>
getDevicesForStream  streamType: <*>
getLastAudibleStreamVolume  treamType: <*>
getMode...
getNeighboringCellInfo calling app is <*>
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>
getRecentTasks: topActivity=ComponentInfo{<*>}
getRingerMode...
getRingtonePlayer...
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output
getStreamVolume  treamType: <*>
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output
handleBatteryUpdate
handleTimeUpdate
HBM brightnessIn =<*>
HBM brightnessOut =<*>
instantCollapse
interceptKeyBeforeQueueing: key <*> , result : <*>
interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>
isBluetoothA2dpOn...
isBluetoothScoOn...
isMusicActive...
isSimPinSecure mSimDatas is null or empty
isWiredHeadsetOn...
Killing <*> (adj <*>): empty for <*>
logNotificationVisibilityChanges runInThread over
logNotificationVisibilityChanges runInThread start
makeExpandedInvisible: mExpandedVisible=<*>
Marking notification as seen <*>|<*>|<*>|<*>|<*>
mHeadsUpExistenceChangedRunnable
<*> is <*>
new Process app=ProcessRecord{<*> <*>}, name: <*>, euid: <*>
notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>
onExpandingFinished
onExpandingStarted
onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>
onNotificationClick called
onNotificationExpansionChanged called
onNotificationVisibilityChanged called
onReceive, action:<*>
onTouchEvent::<*>, x=<*>, y=<*>
onTrackingStarted
onTrackingStopped: <*>
orientation change is complete, call stopFreezingDisplayLocked
overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>
Pid:<*> MediaPlayer destructor
playSoundEffect   effectType: <*>
printFreezingDisplayLogsopening app wtoken = AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> <*> <*> <*>}}}, allDrawn= <*>, startingDisplayed =  <*>, startingMoved =  <*>, isRelaunching =  <*>
Process <*> (pid <*>) has died
querySoundEffectsEnabled...
ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>userId=<*>
received broadcast <*>
Received TIME_TICK alarm; rescheduling
RefreshBatteryInfo isBatteryLow: <*>
registerCallback not in UI.
release:lock=<*>, flg=<*>, tag="<*>", name=<*>, ws=<*>, uid=<*>, pid=<*>
Releasing suspend blocker "<*>".
remove(PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}) changed bounds; rebatching
removeNotification:<*>|<*>|<*>|<*>|<*>
removeNotificationChildren
resumeSuspendedAutohide
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED
schedulePeek
scheduleTimeTickEvent triggerAtTime = <*>
Scheduling restart of crashed service <*> in <*>
Screen frozen for <*> due to Window{<*> <*> <*>}
sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>
sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> android broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>
Sending non-protected broadcast <*> from system <*> pkg <*>
setDataSource(<*>, <*>, <*>)
setLightsOn(<*>)
setSpeakerphoneOn  on: <*>
setSpeakerphoneOn on:<*>
setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)
setWiredDeviceConnectionState  type: <*>  state: <*>
shouldBlockLocation  ret:<*>
shouldBlockLocation running ...
Skipping AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> <*> <*> <*>}}} -- going to hide
Skipping, withExcluded: <*>, <*> { act=<*> dat=<*> flg=<*> cmp=<*> (has extras) }
Skipping, withExcluded: <*>, <*> { act=<*> dat=<*> typ=<*> flg=<*> cmp=<*> (has extras) }
Skipping, withExcluded: <*>, <*> { act=<*> flg=<*> cmp=<*> (has extras) }
Skipping, withExcluded: <*>, <*> { flg=<*> cmp=<*> (has extras) }
Skipping, withExcluded: <*>, <*> { flg=<*> cmp=<*> bnds=<*> }
Start dump, calling from : pid=<*>, uid=<*>
Start proc <*> for service <*>
START <*> {act=<*> cat=[<*>] flg=<*> cmp=<*> bnds=<*>} from uid <*> on display <*>
START <*> {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
START <*> {flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
startActivity called from non-Activity context; forcing <*> for: Intent { flg=<*> cmp=<*> (has extras) }
startAnimation begin
startAnimation end
state.clipTopAmount:<*>, i:<*>
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>
suspendAutohide
Taking screenshot from Surface with crop:[Rect(<*>, <*> - <*>, <*>)], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]
The change in focus caused us to need to do a layout begin
The change in focus caused us to need to do a layout end
Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found
unregisterAudioFocusListener...
updateChargingLocked: charging=<*>
updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>
updateDimmedActivatedHideSensitive overlap:<*>
updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>
updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>
updateLightsLocked,turn off notificationLight
updateNotificationShade: total=<*>, active=<*>
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>
visible is <*>
visible is <*> gt <*>
