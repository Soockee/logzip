******* GOODBYE <*> ********
Accepted socket connection from <*>
<*> set to <*>
Cannot open channel to <*> at election address <*>
caught end of stream exception
Client attempting to establish new session at <*>
Client attempting to renew session <*> at <*>
Closed socket connection for client <*> (no session established for client)
Closed socket connection for client <*> which had sessionid <*>
Connection broken for id <*>, my id = <*>, error =
Connection request from old client <*>; will be dropped if server is in r-o mode
Established session <*> with negotiated timeout <*> for client <*>
Exception causing close of session <*> due to <*>: ZooKeeperServer not running
Expiring session <*>, timeout of <*> exceeded
First is <*>
Follower sid: <*> : info : <*>
FOLLOWING
FOLLOWING - LEADER ELECTION TOOK - <*>
Getting a snapshot from leader
Got user-level KeeperException when processing sessionid:<*> type:create cxid:<*> zxid:<*> txntype:<*> reqpath:<*> Error Path:<*> Error:KeeperErrorCode = NodeExists for <*>
Have quorum of supporters; starting up and setting last processed zxid: <*>
Have smaller server identifier, so dropping the connection: (<*>, <*>)
Interrupted while waiting for message on queue
Interrupting SendWorker
LOOKING
maxSessionTimeout set to <*>
minSessionTimeout set to <*>
My election bind port: <*>
New election. My id =  <*>, proposed zxid=<*>
Notification time out: <*>
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), FOLLOWING (n.state), <*> (n.sid), <*> (n.peerEPoch), FOLLOWING (my state)
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), FOLLOWING (n.state), <*> (n.sid), <*> (n.peerEPoch), LEADING (my state)
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), LEADING (n.state), <*> (n.sid), <*> (n.peerEPoch), LOOKING (my state)
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), LOOKING (n.state), <*> (n.sid), <*> (n.peerEPoch), FOLLOWING (my state)
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), LOOKING (n.state), <*> (n.sid), <*> (n.peerEPoch), LEADING (my state)
Notification: <*> (n.leader), <*> (n.zxid), <*> (n.round), LOOKING (n.state), <*> (n.sid), <*> (n.peerEPoch), LOOKING (my state)
Processed session termination for sessionid: <*>
Reading snapshot <*>
Received connection request <*>
Revalidating client: <*>
Send worker leaving thread
Sending DIFF
Server environment:<*>=<*>
shutdown of request processor complete
Snapshotting: <*> to <*>
Starting quorum peer
tickTime set to <*>
Unexpected exception causing shutdown while sock still open
Unexpected Exception:
